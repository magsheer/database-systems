package simpledb;

import java.util.*;


/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private final JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    private HashMap<Object, ArrayList<Tuple>> equiHashMap = new HashMap<>();
    private final static int SIZE = 10000;
    transient private Tuple t1 = null;
    transient private Tuple t2 = null;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
    }


    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public String getJoinField1Name() {
        // some code goes here
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    public String getJoinField2Name() {
        // some code goes here
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child1.open();
        child2.open();
        super.open();
        populateMap();
    }

    private boolean populateMap() throws DbException, TransactionAbortedException {
        int count = 0;
        equiHashMap.clear();
        while (child1.hasNext()) {
            t1 = child1.next();
            ArrayList<Tuple> list = equiHashMap.computeIfAbsent(t1.getField(p.getField1()), k -> new ArrayList<>());
            list.add(t1);
            if (count++ == SIZE)
                return true;
        }
        return count > 0;
    }

    public void close() {
        // some code goes here
        super.close();
        child1.close();
        child2.close();
        this.listIt = null;
        this.equiHashMap.clear();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child1.rewind();
        child2.rewind();
    }

    private transient Iterator<Tuple> listIt = null;


    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */

    private Tuple populateList() throws TransactionAbortedException, DbException {
        t1 = listIt.next();

        Tuple mergedTuple = new Tuple(getTupleDesc());
        for (int i = 0; i < t1.getTupleDesc().numFields(); i++)
            mergedTuple.setField(i, t1.getField(i));
        for (int j = 0; j < t2.getTupleDesc().numFields(); j++)
            mergedTuple.setField(t1.getTupleDesc().numFields() + j, t2.getField(j));
        return mergedTuple;

    }

    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (listIt != null && listIt.hasNext()) {
            return populateList();
        }
        while (child2.hasNext()) {
            t2 = child2.next();
            ArrayList<Tuple> list = equiHashMap.get(t2.getField(p.getField2()));
            if (list == null) continue;
            listIt = list.iterator();
            return populateList();
        }
        child2.rewind();
        if (populateMap()) {
            return fetchNext();
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[]{this.child1, this.child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
